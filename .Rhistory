test1 = wsl_gbif("Panthera tigris",basis=c("OBSERVATION","HUMAN_OBSERVATION"))
plot(wrld_simpl)
points(test1[,c("decimalLongitude","decimalLatitude")],pch=20,col="#238b4550",cex=4)
test3 = wsl_gbif("Ailuropoda melanoleuca", grain = 100000 , duplicates = TRUE,
time_period = c(1990,3000), add_infos = c("recordedBy","issue"))
plot(wrld_simpl)
points(test3[,c("decimalLongitude","decimalLatitude")],pch=20,col="#238b4550",cex=4)
?makeTiles
?make_tiles
data(geo_dat)
# Apply the function to divide the extent in ~20 fragments
mt = make_tiles(geo=shp.lonlat,Ntiles=20,sext=TRUE); mt
# How to create new SpatExtent fragments
lapply(mt[[2]],function(x) ext(x))
?wsl_taxonomy
wsl_taxonomy("Cypripedium calceolus",all=FALSE)
wsl_taxonomy("Cypripedium calceolus",all=TRUE)
devtools::document()
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
remove.packages("wsl.gbif")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
install.packages("wsl.gbif")
install.packages("wsl.gbif")
install.packages("../wsl.gbif_r_package",repos=NULL,type="source")
?make_tiles
library(wsl.gbif)
?make_tiles
data(geo_dat)
mt = make_tiles(geo=shp.lonlat,Ntiles=20,sext=TRUE); mt
ext
geo=shp.lonlat
Ntiles=20
sext=TRUE
For study area
if (!is.null(geo)) {
if (!(class(geo)%in%"SpatExtent")) {geo = ext(geo)}
} else {
geo = ext(-180,180,-90,90)
}
# Divide original extent into smaller ones otherwise
ntiles = seq(1:sqrt(Ntiles))
dtiles = data.frame(ntiles)
xFactor = (geo$xmax - geo$xmin)/length(ntiles)
yFactor = (geo$ymax - geo$ymin)/length(ntiles)
dtiles$xCH = -dtiles$ntiles*xFactor + geo$xmax
dtiles$yCH = -dtiles$ntiles*yFactor + geo$ymax
allxy = rbind(c(geo$xmax,geo$ymax),dtiles[,-1])
tile.index = nrow(allxy)-1
# Create all smaller extents
all.tiles =
lapply(1:tile.index, function(x){
# Set target ymax and ymin
t.ymax = allxy[x,2]
t.ymin = allxy[x+1,2]
# Generate tiles for each line (xmax -> xmin)
line.tile =
lapply(1:tile.index,function(y){
# Set target xmax and xmin
t.xmax = allxy[y,1]
t.xmin = allxy[y+1,1]
# Generate the tile
one.tile = paste0("POLYGON((",t.xmin," ",t.ymin,", ",
t.xmax," ",t.ymin,", ",
t.xmax," ",t.ymax,", ",
t.xmin," ",t.ymax,", ",
t.xmin," ",t.ymin,"))")
meta.tile = c(t.xmin,t.xmax,t.ymin,t.ymax)
return(list(one.tile,meta.tile))
})
part.tile = lapply(line.tile,function(y) y[[1]])
part.meta = lapply(line.tile,function(y) y[[2]])
return(list(part.tile,part.meta))
})
# Unlist tile geo
part.tile2 = lapply(all.tiles,function(x) x[[1]])
geo.tiles = unlist(part.tile2,recursive=FALSE)
geo.tiles
lapply(all.tiles,function(x) ext(x[[2]]))
lapply(all.tiles,function(x) x[[2]])
geo.meta = unlist(lapply(all.tiles,function(x) ext(x[[2]])),recursive=FALSE)
geo.meta = unlist(lapply(all.tiles,function(x) x[[2]]),recursive=FALSE)
geo.meta
geo.meta = lapply(geo.meta,function(x) ext(geo.meta))
geo.meta = lapply(geo.meta,function(x) ext(x))
geo.meta
devtools::document()
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
remove.packages("wsl.gbif")
install.packages("../wsl.gbif_r_package",repos=NULL,type="source")
library(wsl.gbif)
?make_tiles
data(geo_dat)
mt = make_tiles(geo=shp.lonlat,Ntiles=20,sext=TRUE); mt
?wsl_gbif
# Load maptools for the map world
library(maptools)
data(wrld_simpl)
# Load the Alps Extend
data(geo_dat)
# Downloading worldwide the observations of Panthera tigris
test1 = wsl_gbif("Panthera tigris",basis=c("OBSERVATION","HUMAN_OBSERVATION"))
plot(wrld_simpl)
points(test1[,c("decimalLongitude","decimalLatitude")],pch=20,col="#238b4550",cex=4)
test=wsl_gbif("Acer campestre")
# Load maptools for the map world
library(maptools)
data(wrld_simpl)
# Load the Alps Extend
data(geo_dat)
# Downloading worldwide the observations of Panthera tigris
test1 = wsl_gbif("Panthera tigris",basis=c("OBSERVATION","HUMAN_OBSERVATION"))
plot(wrld_simpl)
points(test1[,c("decimalLongitude","decimalLatitude")],pch=20,col="#238b4550",cex=4)
# Downloading in the Alps the observations of Cypripedium calceolus (with a 100m grain and
# by adding the 'issues' column)
test2 = wsl_gbif("Cypripedium calceolus", geo = shp.lonlat, grain = 100, add_infos = c("issue"))
# Downloading worlwide the observations of Phascolarctos cinereus (with a 1km grain, after 1980,
# and keeping raster centroids)
test4 = wsl_gbif("Phascolarctos cinereus", grain = 1000,
time_period = c(1990,3000), centroids = TRUE)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
system("R CMD Rd2pdf . --title=gbif.range --output=./gbif.range.pdf --force --no-clean --internals")
devtools::document()
devtools::document()
system("R CMD Rd2pdf . --title=gbif.range --output=./gbif.range.pdf --force --no-clean --internals")
devtools::document()
devtools::document()
devtools::document()
system("R CMD Rd2pdf . --title=gbif.range --output=./gbif.range.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=gbif.range --output=./gbif.range.pdf --force --no-clean --internals")
devtools::document()
devtools::document()
system("R CMD Rd2pdf . --title=gbif.range --output=./gbif.range.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=gbif.range --output=./gbif.range.pdf --force --no-clean --internals")
devtools::document()
devtools::document()
system("R CMD Rd2pdf . --title=gbif.range --output=./gbif.range.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=gbif.range --output=./gbif.range.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=gbif.range --output=./gbif.range.pdf --force --no-clean --internals")
remove.packages("wsl.gbif")
install.packages("../gbif.range_r_package",repos=NULL,type="source")
library(gbif.range)
?get_range
?get_gbif
test1 = get_gbif("Panthera tigris",basis=c("OBSERVATION","HUMAN_OBSERVATION")
)
test1
obs.pt = get_gbif("Panthera tigris",basis=c("OBSERVATION","HUMAN_OBSERVATION"))
obs.pt
names(obs.pt)
obs.pt[c("decimalLongitude","decimalLatitude")]
sp.shp=SpatialPoints(obs.pt[c("decimalLongitude","decimalLatitude")])
sp.shp
sp.shp=SpatialPoints(obs.pt[c("decimalLongitude","decimalLatitude")],crs=crs(eco.earth))
devtools::document()
remove.packages("gbif.range")
system("R CMD Rd2pdf . --title=gbif.range --output=./gbif.range.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=gbif.range --output=./gbif.range.pdf --force --no-clean --internals")
install.packages("gbif.range")
install.packages("gbif.range")
install.packages("../gbif.range_r_package",repos=NULL,type="source")
data(ecoregions)
ls()
plot(eco.earth)
obs.pt = get_gbif("Panthera tigris",basis=c("OBSERVATION","HUMAN_OBSERVATION"))
eco.earth@data
range.tiger = get_range("Panthera tigris",sp.shp,eco.earth,"ECO_NAME")
sp.shp
sp.shp = SpatialPoints(obs.pt[c("decimalLongitude","decimalLatitude")],proj4string=crs(eco.earth))
plot(eco.earth)
plot(sp.shp,add=TRUE)
points(sp.shp,pch=20,col="#238b4550",cex=4,add=TRUE)
plot(sp.shp,pch=20,col="#238b4550",cex=4,add=TRUE)
range.tiger = get_range("Panthera tigris",sp.shp,eco.earth,"ECO_NAME")
range.tiger
plot(range.tiger)
raster()
disaggregate(raster(),10)
##################################################
## get_range
##################################################
#' Create a species range map based on a get_gbif() output
#'
#' Estimates species ranges based on occurrence data (GBIF or not) and bioregions.
#' It first deletes outliers from the observation dataset and then creates a polygon
#' (convex hull) with a user specified buffer around all the observations of one bioregion.
#' If there there is only one observation in a bioregion, a buffer around this point
#' will be created. If all points in a bioregion are on a line, the function will also
#' create a buffer around these points, however, the buffer size increases with the number
#' of points in the line.
#'
#' @param species_name character string of the species name. E.g. "Anemone nemorosa".
#' @param occ_coord a SpatialPoints object.
#' @param Bioreg shapefile containg different bioregions (convex hulls will be classified
#' on a bioreg basis).
#' @param Bioreg_name how is the slot containing the bioregion names called?
#' @param degrees_outlier distance threshold (degrees) for outlier classification. If the
#' nearest minimal distance to the next point is larger than this threshold, it will be
#' considered as an outlier.
#' @param clustered_points_outlier maximum number of points which are closer to each other
#' than the degrees_outlier, but should still be considered as outliers.
#' @param buffer_width_point buffer (in degrees) which will be applied around single observations.
#' @param buffer_increment_point_line how much should the buffer be increased for each point on a line.
#' @param buffer_width_polygon buffer (in degrees) which will be applied around distribution polygons
#' (for each bioregion).
#' @param dir_temp where should the temporary text file for the convex hull be saved?
#' (text file will be deleted again).
#' @param raster Logical. Should the output be a unified raster? Default is TRUE
#' @param res Numeric. If raster = TRUE, which resolution? Final resolution in ° = 1°/res e.g., if 0.1°
#' if res = 10. Default is 10.
#' @details ...
#' @return A shapefile or a SpatRaster
#' @references
#' Lyu, L., Leugger, F., Hagen, O., Fopp, F., Boschman, L. M., Strijk, J. S., ... &
#' Pellissier, L. (2022). An integrated high resolution mapping shows congruent biodiversity
#' patterns of Fagales and Pinales. New Phytologist, 235(2), 759-772 10.1111/nph.18158
#'
#' Hijmans, Robert J. "terra: Spatial Data Analysis. R Package Version 1.6-7." (2022). Terra - CRAN
#' @seealso ...
#' @examples
#' # Load available ecoregions
#' data(ecoregions)
#'
#' # First download the worldwide observations of Panthera tigris and convert to SpatialPoints
#' obs.pt = get_gbif("Panthera tigris",basis=c("OBSERVATION","HUMAN_OBSERVATION"))
#' sp.shp = SpatialPoints(obs.pt[c("decimalLongitude","decimalLatitude")],proj4string=crs(eco.earth))
#'
#' # Plot
#' plot(eco.earth)
#' plot(sp.shp,pch=20,col="#238b4550",cex=4,add=TRUE)
#'
#' # Generate the distributional range map of Panthera tigris for the finest terrestrial ecoregions
#' range.tiger = get_range("Panthera tigris",sp.shp,eco.earth,"ECO_NAME")
#'
#' # Plotting
#'
#'
#'
#' @export
get_range <- function (species_name = NULL,
occ_coord = NULL,
Bioreg = NULL,
Bioreg_name = NULL,
degrees_outlier = 3,
clustered_points_outlier = 2,
buffer_width_point = 4,
buffer_increment_point_line = 0.5,
buffer_width_polygon = 4,
dir_temp = paste0("temp",sample(1:99999999,1)),
raster = TRUE,
res = 10){
### =========================================================================
### remove duplicates
### =========================================================================
occ_coord@coords <- round(occ_coord@coords, 4)
occ_coord <- remove.duplicates(occ_coord)
### =========================================================================
### Check if sufficient data
### =========================================================================
# Check if there sufficient species & if not, make an entry in the log-file and
# end the function
if (length(occ_coord)<=clustered_points_outlier+1){
stop("Too few occurences!")
}
cat("## Start of computation for species: ",species_name," ###", "\n")
### =========================================================================
### Identify outliers
### =========================================================================
#create distance matrix...
mat_dist <- as.matrix(knn.dist(occ_coord@coords, k=clustered_points_outlier))
#mark outliers
cond <- apply(mat_dist, 1, function(x) x[clustered_points_outlier])>degrees_outlier
rm(mat_dist)
cat(paste0(sum(cond), " outlier's from " ,nrow(occ_coord), " | proportion from total points: ", round((sum(cond)/length(occ_coord))*100,0), "%\n"))
occ_coord_mod <- occ_coord[!cond,]
# Stop if too many outliers in data set
if(length(occ_coord_mod)==0){
stop('Too few occurrences within outlier threshold!')
}
### =========================================================================
### Define those polygons
### =========================================================================
ovo=over(occ_coord_mod,Bioreg)
uniq <- levels(factor(ovo[,Bioreg_name]))
# loop over bioregions
SP_dist <- list()
for(g in 1:length(uniq)) {
cat('Bioregion', g, ' of ',length(uniq),": ",uniq[g], '\n')
tmp <- as(gSimplify(Bioreg[Bioreg@data[[Bioreg_name]] == uniq[g],],tol=0.001,topologyPreserve=TRUE),"SpatialPolygons")
a=occ_coord_mod[which(ovo[,Bioreg_name]==uniq[g])]
if(length(a)<3){
k <- 1
cluster_k <- kmeans(a@coords,k)
cluster_k$clusters <- cluster_k$cluster
} else {
if(all(a@coords[,1]==a@coords[,2])){
a@coords[,2] <- a@coords[,2]+0.00001
}
m_clust <- Mclust(a@coords+1000, verbose=F) #to determine number of clusters
k <- m_clust$G #k=number of clusters
while(k>length(a)-2){k <- k-1} #reduce k if necessary so that KMeans_rcpp() will run
if(k==0){k <- 1}
cluster_k <- KMeans_rcpp(a@coords, k, num_init = 20, initializer = 'random')
while(length(unique(cluster_k$clusters))<k){
k <- k-1
cluster_k <- KMeans_rcpp(a@coords, k, num_init = 20, initializer = 'random')
}
}
polygons_list <- list()
for(i in 1:k){
a_temp <- a[cluster_k$clusters==i] #kmeans (with number of clusters from mcluster)
my_shpe=conv_function(a_temp,
bwp=buffer_width_point,
bipl=buffer_increment_point_line,
bwpo=buffer_width_polygon,
temp_dir=dir_temp,
g=g)
polygons_list[[i]] <- suppressWarnings(gIntersection(gBuffer(SpatialPolygons(Srl=list(my_shpe)), width=0),tmp)) #zero buffer to avoid error
polygons_list[[i]]$ID <- i
}
SP_dist[[g]] <- Reduce(rbind, polygons_list)
if(class(SP_dist[[g]])=='SpatialCollections'){
SP_dist[[g]] <- SP_dist[[g]]@polyobj #only keep SpatialPolygon
}
}
L <- SP_dist[!is.na(SP_dist)]
### =========================================================================
### Check and return output
### =========================================================================
if(!dir.exists(dir_temp)){
unlink(dir_temp, recursive=T)
}
if(length(L)==0){
stop('No occurrences within Bioregions. Empty raster produced.')
}
shp_species <- Reduce(rbind, L)
# shp_species=gUnaryUnion(shp_species,checkValidity = 2)
shp_species@proj4string=occ_coord@proj4string
cat("## End of computation for species: ",species_name," ###", "\n")
# Convert in raster files or not
if (raster){
ras.res <- rast(disaggregate(raster(),res))
sp.range.u <- gUnaryUnion(shp_species)
ras <- rasterize(vect(sp.range.u),ras.res)
shp_species <- crop(ras,ext(sp.range.u))
}
cat("## End of computation for species: ",species_name," ###", "\n")
return(shp_species)
}
range.tiger = get_range("Panthera tigris",sp.shp,eco.earth,"ECO_NAME")
range.tiger
plot(range.tiger)
plot(eco.earth)
plot(range.tiger,col="#238b4550",add=TRUE)
devtools::document()
system("R CMD Rd2pdf . --title=gbif.range --output=./gbif.range.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=gbif.range --output=./gbif.range.pdf --force --no-clean --internals")
remove.packages("gbif.range")
install.packages("gbif.range")
install.packages("gbif.range")
install.packages("../gbif.range_r_package",repos=NULL,type="source")
?get_range
data(ecoregions)
obs.pt = get_gbif("Panthera tigris",basis=c("OBSERVATION","HUMAN_OBSERVATION"))
sp.shp = SpatialPoints(obs.pt[c("decimalLongitude","decimalLatitude")],proj4string=crs(eco.earth))
plot(eco.earth)
plot(sp.shp,pch=20,col="#238b4550",cex=4,add=TRUE)
range.tiger = get_range("Panthera tigris",sp.shp,eco.earth,"ECO_NAME")
plot(eco.earth)
plot(range.tiger,col="#238b45",add=TRUE)
remove.packages("gbif.range")
devtools::document()
system("R CMD Rd2pdf . --title=gbif.range --output=./gbif.range.pdf --force --no-clean --internals")
remove.packages("gbif.range"install.packages("../gbif.range_r_package",repos=NULL,type="source"))
install.packages("../gbif.range_r_package",repos=NULL,type="source")
?conv_fucntion
?conv_function
?get_doi
obs.pt = get_gbif("Panthera tigris")
obs.am = get_gbif("Ailuropoda melanoleuca")
get_doi(list(obs.pt,obs.am),title="GBIF_test2",description="A small example 2",
source_url="https://example.com/",user="ginette",pwd="BUg7t%oE@Nh6")
?get_gbif
# Load maptools for the map world
library(maptools)
data(wrld_simpl)
# Load the Alps Extend
data(geo_dat)
# Downloading worldwide the observations of Panthera tigris
obs.pt = get_gbif("Panthera tigris",basis=c("OBSERVATION","HUMAN_OBSERVATION"))
plot(wrld_simpl)
points(obs.pt[,c("decimalLongitude","decimalLatitude")],pch=20,col="#238b4550",cex=4)
# Downloading in the Alps the observations of Cypripedium calceolus (with a 100m grain and
# by adding the 'issues' column)
obs.cc = get_gbif("Cypripedium calceolus", geo = shp.lonlat, grain = 100, add_infos = c("issue"))
# Downloading worlwide the observations of Ailuropoda melanoleuca (with a 100km grain, after 1990
# and by keeping duplicates and by adding the name of the person who collected the panda records)
obs.am = get_gbif("Ailuropoda melanoleuca", grain = 100000 , duplicates = TRUE,
time_period = c(1990,3000), add_infos = c("recordedBy","issue"))
plot(wrld_simpl)
points(obs.am[,c("decimalLongitude","decimalLatitude")],pch=20,col="#238b4550",cex=4)
?get_range
# Load available ecoregions
data(ecoregions)
# First download the worldwide observations of Panthera tigris and convert to SpatialPoints
obs.pt = get_gbif("Panthera tigris",basis=c("OBSERVATION","HUMAN_OBSERVATION"))
sp.shp = SpatialPoints(obs.pt[c("decimalLongitude","decimalLatitude")],proj4string=crs(eco.earth))
# Plot
plot(eco.earth)
plot(sp.shp,pch=20,col="#238b4550",cex=4,add=TRUE)
range.tiger = get_range("Panthera tigris",sp.shp,eco.earth,"ECO_NAME")
# Plotting
plot(eco.earth)
plot(range.tiger,col="#238b45",add=TRUE)
?get_taxonomy
get_taxonomy("Cypripedium calceolus",all=FALSE)
get_taxonomy("Cypripedium calceolus",all=TRUE)
?make_tiles
# Load the European Alps Extent
data(geo_dat)
# Apply the function to divide the extent in ~20 fragments
mt = make_tiles(geo=shp.lonlat,Ntiles=20,sext=TRUE); mt
?obs_filter
# Load the European Alps extent and a raster of a random resolution
data(geo_dat)
data(exrst)
# Downloading in the European Alps the observations of two plant species
obs.arcto = get_gbif("Arctostaphylos alpinus",geo=shp.lonlat)
obs.saxi = get_gbif("Saxifraga cernua",geo=shp.lonlat)
plot(vect(shp.lonlat))
points(obs.arcto[,c("decimalLongitude","decimalLatitude")],pch=20,col="#238b4550",cex=1)
points(obs.saxi[,c("decimalLongitude","decimalLatitude")],pch=20,col="#99000d50",cex=1)
# rbind both datasets
both.sp = rbind(obs.arcto,obs.saxi)
# Run function
obs.filt = obs_filter(both.sp,rst)
# Check new points
x11();plot(vect(shp.lonlat))
points(obs.filt[obs.filt$Species%in%"Arctostaphylos alpinus",c("x","y")],pch=20,col="#238b4550",cex=1)
points(obs.filt[obs.filt$Species%in%"Saxifraga cernua",c("x","y")],pch=20,col="#99000d50",cex=1)
library(gbif.range)
devtools::document()
system("R CMD Rd2pdf . --title=gbif.range --output=./gbif.range.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=gbif.range --output=./gbif.range.pdf --force --no-clean --internals")
remove.packages("gbif.range")
install.packages("../gbif.range_r_package",repos=NULL,type="source")
obs.pt = get_gbif("Panthera tigris",basis=c("OBSERVATION","HUMAN_OBSERVATION"))
get_taxonomy("Panthera tigris",all=FALSE)
names(eco.earth)
range.tiger = get_range("Panthera tigris",obs.pt,eco.earth,"ECO_NAME")
remove.packages("gbif.range")
devtools::document()
system("R CMD Rd2pdf . --title=gbif.range --output=./gbif.range.pdf --force --no-clean --internals")
install.packages("../gbif.range_r_package",repos=NULL,type="source")
obs.pt = get_gbif("Panthera tigris",basis=c("OBSERVATION","HUMAN_OBSERVATION"))
library(maptools)
data(wrld_simpl)
plot(wrld_simpl)
points(obs.pt[,c("decimalLongitude","decimalLatitude")],pch=20,col="#238b4550",cex=4)
library(maptools)
data(wrld_simpl)
plot(wrld_simpl,col="#fee6ce")
points(obs.pt[,c("decimalLongitude","decimalLatitude")],pch=20,col="#238b4550",cex=4)
library(maptools)
data(wrld_simpl)
plot(wrld_simpl,col="#bcbddc")
points(obs.pt[,c("decimalLongitude","decimalLatitude")],pch=20,col="#238b4550",cex=4)
range.tiger = get_range("Panthera tigris",obs.pt,eco.earth,"ECO_NAME")
remove.packages("gbif.range")
devtools::document()
system("R CMD Rd2pdf . --title=gbif.range --output=./gbif.range.pdf --force --no-clean --internals")
install.packages("../gbif.range_r_package",repos=NULL,type="source")
devtools::document()
system("R CMD Rd2pdf . --title=gbif.range --output=./gbif.range.pdf --force --no-clean --internals")
obs.pt = get_gbif("Panthera tigris",basis=c("OBSERVATION","HUMAN_OBSERVATION"))
library(maptools)
data(wrld_simpl)
plot(wrld_simpl,col="#bcbddc")
points(obs.pt[,c("decimalLongitude","decimalLatitude")],pch=20,col="#238b4550",cex=4)
get_taxonomy("Panthera tigris",all=FALSE)
names(eco.earth)
range.tiger = get_range("Panthera tigris",obs.pt,eco.earth,"ECO_NAME")
plot(wrld_simpl,col="#bcbddc")
plot(range.tiger,col="#238b45",add=TRUE)
library(maptools)
data(wrld_simpl)
plot(wrld_simpl,col="#bcbddc")
points(obs.pt[,c("decimalLongitude","decimalLatitude")],pch=20,col="#238b4550",cex=2)
library(maptools)
data(wrld_simpl)
plot(wrld_simpl,col="#bcbddc")
points(obs.pt[,c("decimalLongitude","decimalLatitude")],pch=20,col="#238b4570",cex=3)
devtools::document()
system("R CMD Rd2pdf . --title=gbif.range --output=./gbif.range.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=gbif.range --output=./gbif.range.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=gbif.range --output=./gbif.range.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=gbif.range --output=./gbif.range.pdf --force --no-clean --internals")
