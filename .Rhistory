install.packages("doParallel")
install.packages("spatstat")
install.packages("usdm")
install.packages("neuralnet")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
# To update changes
devtools::document()
# To update documentation
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
# To update changes
devtools::document()
# To update documentation
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
# To update changes
devtools::document()
# To update documentation
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
# To update changes
devtools::document()
# To update documentation
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
remove.packages("wsl.biodiv"")
""
remove.packages("wsl.biodiv")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
install.packages("./wsl.biodiv_r_package",repos=NULL,type="source")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
library(wsl.biodiv)
?wsl.gbif
?wsl.glm
?wsl.gbif
library(wsl.plot)
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
wsl.gbif
ws_.gbif
library(wsl.plot)
library(wsl.biodiv)
ws_.gbif
wsl.gbif
wsl.gbif("asteraceae"")
c
""
wsl.gbif("asteraceae")
wsl.gbif("asteraceee")
wsl.gbif("Aster")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
devtools::document()
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
stall.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remov.packages("wsl.biodiv")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
devtools::document()
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
library(wsl.gbif)
library(wsl.biodiv)
wsl.gbif("222")
remove.packages("wsl.biodiv")
devtools::document()
rlang::last_error()
install.packages("rgbif")
install.packages("CoordinateCleaner")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv"")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
wsl.evaluate.pres()
wsl.evaluate.pres
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
remove.packages("wsl.biodiv")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
library(wsl.biodiv)
?wsl.ebc
?wsl.ppmGlasso
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
install.packages("snow")
install.packages("gbm")
install.packages("randomForest")
install.packages("ROCR")
install.packages("NMOF")
install.packages("spatstat")
install.packages("neuralnet")
install.packages("glmnet")
install.packages("coordinateCleaner")
install.packages("CoordinateCleaner")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
library(wsl.biodiv)
wsl.gbif()
wsl.gbif
wsl.gbif("Alagoas curassow")
wsl.gbif("Gymnogyps californianus")
wsl.gbif("Mitu mitu")
wsl.gbif("Mitu mitu",add_infos="hasGeospatialIssue")
wsl.gbif("Mitu mitu")
wsl.gbif("Abies alba")
wsl.gbif("Abies alba",tiles=100)
test=wsl.gbif("Abies alba")
test=wsl.gbif("Abies alba",tiles=10)
test=wsl.gbif("Abies alba",tiles=100)
test=wsl.gbif("Abies alba",tiles=1000)
remove.packages("wsl.biodiv")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
library(wsl.biodiv)
?wsl.gbif
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("tools")
install.packages("tools")
install.packages("tools")
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
tinytex::parse_install("filename.log")
tinytex::parse_install()
tinytex::parse_install(letlxmacro.sty)
tinytex::parse_install("letlxmacro.sty)
tinytex::parse_install("letlxmacro.sty)
tinytex::parse_install("letlxmacro.sty")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
tinytex::install_tinytex()
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::build_manual()
Sys.getenv
Sys.getenv("C:\Program Files\MiKTeX 2.9\miktex\bin\x64")
Sys.getenv("C:/Program Files/MiKTeX 2.9/miktex/bin/x64")
Sys.getenv("C:/Program Files/MiKTeX 2.9/miktex/bin/x64")
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
remove.packages("wsl.biodiv")
devtools::document()
library(wsl.biodiv)
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
devtools::document()
?wsl.taXnames
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
remove.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
devtools::document()
devtools::document()
devtools::document()
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
install.packages("../wsl.gbif_r_package",repos=NULL,type="source")
library(wsl.gbif)
extent
raster
library(wsl.gbif)
?wsl.taXnames
wsl.taXnames("Cypripedium calceolus",all=FALSE)
wsl.taXnames("Cypripedium calceolus",all=TRUE)
?wsl.gbif
data(AlpineConvention_lonlat)
test2 = wsl.gbif("Ailuropoda melanoleuca", grain = 100000 , duplicates = TRUE,
time_period = c(1990,3000), add_infos = "recordedBy")
test2
devtools::document()
remove.packages("wsl.gbif")
install.packages("../wsl.gbif_r_package",repos=NULL,type="source")
remove.packages("wsl.gbif")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
install.packages("../wsl.gbif_r_package",repos=NULL,type="source")
library(wsl.gbif)
wsl.gbif?
wsl.gbif
?wsl.gbif
data(AlpineConvention_lonlat)
test1 = wsl.gbif("Panthera tigris")
pwd=BUg7t%oE@Nh6
pwd="BUg7t%oE@Nh6"
usr="ginette"
rgbif::derived_dataset(test1,"GBIF_test",
"Filetred and cleaned based on CoordinateCleaner",source_url="",user=usr,pwd=pwd)
d.target = table(test1$datasetKey)
d.target
d.summary = data.frame(datasetKey = names(d.target),count = as.numeric(d.target))
d.summary
rgbif::derived_dataset(d.summary,"GBIF_test",
"Filetred and cleaned based on CoordinateCleaner",source_url="",user=usr,pwd=pwd)
d.summary
d.summary = data.frame(datasetKey = names(d.target),count = as.numeric(d.target))
rgbif::derived_dataset(d.summary,"GBIF_test",
"Filetred and cleaned based on CoordinateCleaner",source_url="",
user=usr,pwd=pwd)
rgbif::derived_dataset(d.summary,"GBIF_test",
"Filetred and cleaned based on CoordinateCleaner",source_url="www.tata.com",
user=usr,pwd=pwd)
rgbif::derived_dataset(d.summary,"GBIF_test",
"Filetred and cleaned based on CoordinateCleaner",source_url="www.tata.com",
user=usr,pwd=pwd)
rgbif::derived_dataset(d.summary,"GBIF_test",
"Filetred and cleaned based on CoordinateCleaner",source_url="https://www.tata.com/",
user=usr,pwd=pwd)
rgbif::derived_dataset(d.summary,"GBIF_test",
"Filetred and cleaned based on CoordinateCleaner",source_url="https://example.com/",
user=usr,pwd=pwd)
remove.packages("wsl.gbif")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
remove.packages("wsl.gbif")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
install.packages("../wsl.gbif_r_package",repos=NULL,type="source")
install.packages("../wsl.gbif_r_package",repos=NULL,type="source")
install.packages("../wsl.gbif_r_package",repos=NULL,type="source")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
remove.packages("wsl.biodiv")
remove.packages("wsl.gbif")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
install.packages("../wsl.gbif_r_package",repos=NULL,type="source")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
install.packages("../wsl.gbif_r_package",repos=NULL,type="source")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
install.packages("../wsl.gbif_r_package",repos=NULL,type="source")
?wsl_gbif
?wsl_taXnames
remove.packages("wsl.gbif")
devtools::document()
devtools::document()
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
install.packages("../wsl.gbif_r_package",repos=NULL,type="source")
devtools::document()
devtools::document()
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
install.packages("../wsl.gbif_r_package",repos=NULL,type="source")
library(wsl.gbif)
data(AlpineConvention_lonlat)
data(exrst)
devtools::document()
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
remove.packages("wsl.gbif")
install.packages("../wsl.gbif_r_package",repos=NULL,type="source")
devtools::document()
remove.packages("wsl.gbif")
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
install.packages("../wsl.gbif_r_package",repos=NULL,type="source")
devtools::document()
devtools::document()
devtools::document()
remove.packages("wsl.gbif")
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
install.packages("../wsl.gbif_r_package",repos=NULL,type="source")
library(wsl.gbif)
?wsl_doi
obs.pt = wsl_gbif("Panthera tigris")
obs.am = wsl_gbif("Ailuropoda melanoleuca")
wsl_doi(obs.pt,title="GBIF_test1",description="A small example 1",
source_url="https://example.com/",user="ginette",pwd="BUg7t%oE@Nh6")
wsl_doi(list(obs.pt,obs.am),title="GBIF_test2",description="A small example 2",
source_url="https://example.com/",user="ginette",pwd="BUg7t%oE@Nh6")
?wsl_obs_filter
data(geo_dat)
data(exrst)
obs.arcto = wsl_gbif("Arctostaphylos alpinus",geo=shp.lonlat)
obs.saxi = wsl_gbif("Saxifraga cernua",geo=shp.lonlat)
plot(vect(shp.lonlat))
points(obs.arcto[,c("decimalLongitude","decimalLatitude")],pch=20,col="#238b4550",cex=1)
points(obs.saxi[,c("decimalLongitude","decimalLatitude")],pch=20,col="#99000d50",cex=1)
# rbind both datasets
both.sp = rbind(obs.arcto,obs.saxi)
# Run function
obs.filt = wsl_obs_filter(both.sp,rst)
# Check new points
x11();plot(vect(shp.lonlat))
points(obs.filt[obs.filt$Species%in%"Arctostaphylos alpinus",c("x","y")],pch=20,col="#238b4550",cex=1)
points(obs.filt[obs.filt$Species%in%"Saxifraga cernua",c("x","y")],pch=20,col="#99000d50",cex=1)
?wsl_gbif
library(maptools)
data(wrld_simpl)
# Load the Alps Extend
data(geo_dat)
# Downloading worldwide the observations of Panthera tigris
test1 = wsl_gbif("Panthera tigris",basis=c("OBSERVATION","HUMAN_OBSERVATION"))
plot(wrld_simpl)
points(test1[,c("decimalLongitude","decimalLatitude")],pch=20,col="#238b4550",cex=4)
test3 = wsl_gbif("Ailuropoda melanoleuca", grain = 100000 , duplicates = TRUE,
time_period = c(1990,3000), add_infos = c("recordedBy","issue"))
plot(wrld_simpl)
points(test3[,c("decimalLongitude","decimalLatitude")],pch=20,col="#238b4550",cex=4)
?makeTiles
?make_tiles
data(geo_dat)
# Apply the function to divide the extent in ~20 fragments
mt = make_tiles(geo=shp.lonlat,Ntiles=20,sext=TRUE); mt
# How to create new SpatExtent fragments
lapply(mt[[2]],function(x) ext(x))
?wsl_taxonomy
wsl_taxonomy("Cypripedium calceolus",all=FALSE)
wsl_taxonomy("Cypripedium calceolus",all=TRUE)
devtools::document()
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
remove.packages("wsl.gbif")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
install.packages("wsl.gbif")
install.packages("wsl.gbif")
install.packages("../wsl.gbif_r_package",repos=NULL,type="source")
?make_tiles
library(wsl.gbif)
?make_tiles
data(geo_dat)
mt = make_tiles(geo=shp.lonlat,Ntiles=20,sext=TRUE); mt
ext
geo=shp.lonlat
Ntiles=20
sext=TRUE
For study area
if (!is.null(geo)) {
if (!(class(geo)%in%"SpatExtent")) {geo = ext(geo)}
} else {
geo = ext(-180,180,-90,90)
}
# Divide original extent into smaller ones otherwise
ntiles = seq(1:sqrt(Ntiles))
dtiles = data.frame(ntiles)
xFactor = (geo$xmax - geo$xmin)/length(ntiles)
yFactor = (geo$ymax - geo$ymin)/length(ntiles)
dtiles$xCH = -dtiles$ntiles*xFactor + geo$xmax
dtiles$yCH = -dtiles$ntiles*yFactor + geo$ymax
allxy = rbind(c(geo$xmax,geo$ymax),dtiles[,-1])
tile.index = nrow(allxy)-1
# Create all smaller extents
all.tiles =
lapply(1:tile.index, function(x){
# Set target ymax and ymin
t.ymax = allxy[x,2]
t.ymin = allxy[x+1,2]
# Generate tiles for each line (xmax -> xmin)
line.tile =
lapply(1:tile.index,function(y){
# Set target xmax and xmin
t.xmax = allxy[y,1]
t.xmin = allxy[y+1,1]
# Generate the tile
one.tile = paste0("POLYGON((",t.xmin," ",t.ymin,", ",
t.xmax," ",t.ymin,", ",
t.xmax," ",t.ymax,", ",
t.xmin," ",t.ymax,", ",
t.xmin," ",t.ymin,"))")
meta.tile = c(t.xmin,t.xmax,t.ymin,t.ymax)
return(list(one.tile,meta.tile))
})
part.tile = lapply(line.tile,function(y) y[[1]])
part.meta = lapply(line.tile,function(y) y[[2]])
return(list(part.tile,part.meta))
})
# Unlist tile geo
part.tile2 = lapply(all.tiles,function(x) x[[1]])
geo.tiles = unlist(part.tile2,recursive=FALSE)
geo.tiles
lapply(all.tiles,function(x) ext(x[[2]]))
lapply(all.tiles,function(x) x[[2]])
geo.meta = unlist(lapply(all.tiles,function(x) ext(x[[2]])),recursive=FALSE)
geo.meta = unlist(lapply(all.tiles,function(x) x[[2]]),recursive=FALSE)
geo.meta
geo.meta = lapply(geo.meta,function(x) ext(geo.meta))
geo.meta = lapply(geo.meta,function(x) ext(x))
geo.meta
devtools::document()
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
remove.packages("wsl.gbif")
install.packages("../wsl.gbif_r_package",repos=NULL,type="source")
library(wsl.gbif)
?make_tiles
data(geo_dat)
mt = make_tiles(geo=shp.lonlat,Ntiles=20,sext=TRUE); mt
?wsl_gbif
# Load maptools for the map world
library(maptools)
data(wrld_simpl)
# Load the Alps Extend
data(geo_dat)
# Downloading worldwide the observations of Panthera tigris
test1 = wsl_gbif("Panthera tigris",basis=c("OBSERVATION","HUMAN_OBSERVATION"))
plot(wrld_simpl)
points(test1[,c("decimalLongitude","decimalLatitude")],pch=20,col="#238b4550",cex=4)
test=wsl_gbif("Acer campestre")
# Load maptools for the map world
library(maptools)
data(wrld_simpl)
# Load the Alps Extend
data(geo_dat)
# Downloading worldwide the observations of Panthera tigris
test1 = wsl_gbif("Panthera tigris",basis=c("OBSERVATION","HUMAN_OBSERVATION"))
plot(wrld_simpl)
points(test1[,c("decimalLongitude","decimalLatitude")],pch=20,col="#238b4550",cex=4)
# Downloading in the Alps the observations of Cypripedium calceolus (with a 100m grain and
# by adding the 'issues' column)
test2 = wsl_gbif("Cypripedium calceolus", geo = shp.lonlat, grain = 100, add_infos = c("issue"))
# Downloading worlwide the observations of Phascolarctos cinereus (with a 1km grain, after 1980,
# and keeping raster centroids)
test4 = wsl_gbif("Phascolarctos cinereus", grain = 1000,
time_period = c(1990,3000), centroids = TRUE)
